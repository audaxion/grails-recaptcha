{"name":"Grails ReCaptcha","tagline":"ReCaptcha plugin for Grails","body":"# Introduction\r\n\r\nThis plugin is designed to make using the ReCaptcha and Mailhide services within Grails easy. In order to use this plugin, you must have a ReCaptcha account, available from [http://www.google.com/recaptcha](http://www.google.com/recaptcha).\r\n\r\n# Installation\r\n\r\nAdd the following to your `grails-app/conf/BuildConfig.groovy`\r\n\r\n    …\r\n    plugins {\r\n        …\r\n        compile ':recaptcha:0.6.2'\r\n        …\r\n    }\r\n    \r\nUpon installation, run `grails recaptcha-quickstart` to create the skeleton configuration. The quickstart has two targets: `integrated` or `standalone`, depending on where you'd like the configuration to live.\r\n\r\n## Integrated Configuration\r\nIntegrated configuration adds the following to the end of your `Config.groovy` file:\r\n\r\n    // Added by the Recaptcha plugin:\r\n    recaptcha {\r\n        // These keys are generated by the ReCaptcha service\r\n        publicKey = \"\"\r\n        privateKey = \"\"\r\n\r\n        // Include the noscript tags in the generated captcha\r\n        includeNoScript = true\r\n\r\n        // Force language change. See this for more: http://code.google.com/p/recaptcha/issues/detail?id=133\r\n        forceLanguageInURL = false\r\n\r\n        // Set to false to disable the display of captcha\r\n        enabled = true\r\n\r\n        // Communicate using HTTPS\r\n        useSecureAPI = true\r\n    }\r\n\r\n    mailhide {\r\n        // Generated by the Mailhide service\r\n        publicKey = \"\"\r\n        privateKey = \"\"\r\n    }\r\n    \r\nThis configuration can be modified to mimic the standalone if there is a need for different behavior depending on the current environment.\r\n\r\n## Standalone Configuration\r\nStandlaone configuration creates a file called  `RecaptchaConfig.groovy`  in  `grails-app/conf` with the following content:\r\n\r\n\trecaptcha {\r\n\t    // These keys are generated by the ReCaptcha service\r\n\t    publicKey = \"\"\r\n\t    privateKey = \"\"\r\n\r\n\t    // Include the noscript tags in the generated captcha\r\n\t    includeNoScript = true\r\n\r\n\t    // Force language change. See this for more: http://code.google.com/p/recaptcha/issues/detail?id=133\r\n        forceLanguageInURL = false\r\n\t}\r\n\r\n\tmailhide {\r\n\t    publicKey = \"\"\r\n\t    privateKey = \"\"\r\n\t} \r\n\r\n\tenvironments {\r\n\t  development {\r\n\t    recaptcha {\r\n\t      // Set to false to disable the display of captcha\r\n\t      enabled = false\r\n\r\n\t      // Communicate using HTTPS\r\n\t      useSecureAPI = false\r\n\t    }\r\n\t  }\r\n\t  production {\r\n\t    recaptcha {\r\n\t      // Set to false to disable the display of captcha\r\n\t      enabled = true\r\n\r\n\t      // Communicate using HTTPS\r\n\t      useSecureAPI = true\r\n\t    }\r\n\t  }\r\n\t}\r\n\r\n# Usage - ReCaptcha\r\n\r\nThe plugin is simple to use. In order to use it, there are four basic steps:\r\n\r\n## Edit the Configuration\r\n\r\nThe configuration values are pretty self-explanatory, and match with values used by the ReCaptcha service. You must enter your public and private ReCaptcha keys, or errors will be thrown when trying to display a captcha.\r\n\r\n## Use the Tag Library\r\n\r\nThe plugin includes four ReCaptcha tags:  `<recaptcha:ifEnabled>`, `<recaptcha:ifDisabled>`, `<recaptcha:recaptcha>`, and  `<recaptcha:ifFailed>`.\r\n\r\n* The `<recaptcha:ifEnabled>` tag is a simple utility tag that will render the contents of the tag if the captcha is enabled in  `RecaptchaConfig.groovy`.\r\n* The `<recaptcha:ifDisabled>` tag is a simple utility tag that will render the contents of the tag if the captcha is disabled in  `RecaptchaConfig.groovy`.\r\n* The `<recaptcha:recaptcha>` tag is responsible for generating the correct HTML output to display the captcha. It supports four attributes: \"theme\", \"lang\", \"tabindex\", and \"custom\\_theme\\_widget\". These attributes map directly to the values that can be set according to the ReCaptcha API. See the [ReCaptcha Client Guide](https://developers.google.com/recaptcha/intro) for more details.\r\n* The `<recaptcha:recaptchaAjax>` tag is responsible for creating the correct HTML output to display the captcha in an AJAX manner. The tag creates a JavaScript method called `showRecaptcha` that takes an element name as a parameter. This element will contain the generated ReCaptcha widget. This tag supports the same attributes as the `<recaptcha:recaptcha>` tag.\r\n* The `<recaptcha:ifFailed>` tag will render its contents if the previous validation failed. Some ReCaptcha themes, like \"clean\", do not display error messages and require the developer to show an error message. Use this tag if you're using one of these themes.\r\n\r\n## Verify the Captcha\r\n\r\nIn your controller, call `recaptchaService.verifyAnswer(session, request.getRemoteAddr(), params)` to verify the answer provided by the user. This method will return true or false, but will set the `error_message` property on the captcha behind the scenes so that the error message will be properly displayed when the ReCaptcha is redisplayed. Also note that `verifyAnswer` will return `true` if the plugin has been disabled in the configuration - this means you won't have to change your controller.\r\n\r\n## Clean up After Yourself\r\n\r\nOnce the captcha has been verified, call `recaptchaService.cleanUp(session)`. This is not strictly needed, but it will clean the errors from the session.\r\n\r\n## Examples\r\n\r\nHere's a simple example pulled from an account creation application.\r\n\r\n### Tag Usage\r\n\r\nIn `create.gsp`, we add the code to show the captcha:\r\n\r\n    <recaptcha:ifEnabled>\r\n        <recaptcha:recaptcha theme=\"blackglass\"/>\r\n    </recaptcha:ifEnabled>\r\n\r\nIn this example, we're using ReCaptcha's \"blackglass\" theme. Leaving out the \"theme\" attribute will default the captcha to the \"red\" theme.\r\n\r\nIf you are using a theme that does not supply error messages, your code might look like this:\r\n\r\n    <recaptcha:ifEnabled>\r\n        <recaptcha:recaptcha theme=\"clean\"/>\r\n        <recaptcha:ifFailed>CAPTCHA Failed</recaptcha:ifFailed>\r\n    </recaptcha:ifEnabled>\r\n    \r\n### AJAX Tag Usage\r\n    <g:form action=\"someAction\">\r\n      <recaptcha:ifEnabled>\r\n          <recaptcha:recaptchaAjax theme=\"blackglass\"/>\r\n      </recaptcha:ifEnabled>\r\n      <g:submitButton name=\"show\" onclick=\"showRecaptcha(mydiv); return false;\"/>\r\n      <g:submitButton value=\"Submit\" name=\"submit\"/><br/>\r\n      <div id=\"mydiv\"></div>\r\n      <recaptcha:ifFailed>CAPTCHA Failed</recaptcha:ifFailed>\r\n    </g:form>\r\n    \r\nWhen the `show` button is clicked, the ReCaptcha widget will be created and displayed in the `mydiv` element. **The div used to display the widget must be enclosed in the `<g:form>` or the parameters will not be captured correctly.**\r\n\r\nIt is recommended to use the `<recaptcha:ifFailed>` tag in conjunction with the AJAX tag.\r\n\r\n### Customizing the Language\r\n\r\nIf you want to change the language your captcha uses, there are two routes you can follow.\r\n\r\n* Set `lang = \"someLang\"` in the `<recaptcha/>` tag. This has the drawback of only showing the desired language if the user has their browser set to display that language.\r\n* Set `forceLanguageInURL = true` in `ReCaptchaConfig.groovy`. This will add another parameter to the generated URL, forcing the captcha to be shown in the desired language.\r\n\r\nSee [this discussion](http://code.google.com/p/recaptcha/issues/detail?id=133) for more information about changing the language.\r\nSee [ReCaptcha Customization Guide](https://developers.google.com/recaptcha/docs/customization) for available languages.\r\n\r\n### Verify User Input\r\n\r\nHere's an abbreviated controller class that verifies the captcha value when a new user is saved:\r\n\r\n\timport com.megatome.grails.RecaptchaService\r\n\tclass UserController {\r\n\t\tRecaptchaService recaptchaService\r\n\r\n\t\tdef save = {\r\n\t\t\tdef user = new User(params)\r\n\t\t\t...other validation...\r\n\t\t\tdef recaptchaOK = true\r\n\t\t\tif (!recaptchaService.verifyAnswer(session, request.getRemoteAddr(), params)) {\r\n\t\t\t\trecaptchaOK = false\r\n\t\t\t}\r\n\t\t\tif(!user.hasErrors() && recaptchaOK && user.save()) {\r\n\t\t\t\trecaptchaService.cleanUp(session)\r\n\t\t\t\t...other account creation acivities...\r\n\t\t\t\trender(view:'showConfirmation',model:[user:user])\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trender(view:'create',model:[user:user])\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n### Sample Using a Custom Theme\r\n\r\n\r\n\t<g:form action=\"validateCustom\" method=\"post\" >\r\n\t    <div id=\"recaptcha_widget\" style=\"display:none\">\r\n\t        <div id=\"recaptcha_image\" style=\"width:300px;height:57px;\"></div>\r\n\t        <div class=\"recaptcha_only_if_incorrect_sol\" style=\"color:red;\">\r\n\t            Incorrect Answer\r\n\t        </div>\r\n\t        Enter the words above:\r\n\t        <input id=\"recaptcha_response_field\" name=\"recaptcha_response_field\" type=\"text\" autocomplete=\"off\"/>\r\n\t        <div>\r\n\t            <a href=\"javascript:Recaptcha.reload()\">Get another CAPTCHA</a>\r\n\t        </div>\r\n\t        <div class=\"recaptcha_only_if_image\">\r\n\t            <a href=\"javascript:Recaptcha.switch_type('audio')\">Get an audio CAPTCHA</a>\r\n\t        </div>\r\n\t        <div>\r\n\t            <a href=\"javascript:Recaptcha.showhelp()\">Help</a>\r\n\t        </div>\r\n\t   </div>\r\n\t   <recaptcha:ifEnabled>\r\n\t       <recaptcha:recaptcha theme=\"custom\" lang=\"en\" custom_theme_widget=\"recaptcha_widget\"/>\r\n\t   </recaptcha:ifEnabled>\r\n\t   <br/>\r\n\t   <g:submitButton name=\"submit\"/>\r\n\t</g:form>\r\n\r\n\r\n### Testing\r\n\r\nStarting with version 0.4.5, the plugin should be easier to integrate into test scenarios. You can look at the test cases in the plugin itself, or you can implement something similar to:\r\n\r\n\tprivate void buildAndCheckAnswer(def postText, def expectedValid, def expectedErrorMessage) {\r\n\t    def mocker = new MockFor(Post.class)\r\n\t    mocker.demand.getQueryString(4..4) { new QueryString() }\r\n\t    mocker.demand.getText { postText }\r\n\t    mocker.use {\r\n\t      def response = recaptchaService.checkAnswer(\"123.123.123.123\", \"abcdefghijklmnop\", \"response\")\r\n\r\n\t      assertTrue response.valid == expectedValid\r\n\t      assertEquals expectedErrorMessage, response.errorMessage\r\n\t    }\r\n\t}\r\n\r\n\r\nThe `postText` parameter represents the response from the ReCaptcha server. Here are examples of simulating success and failure results:\r\n\r\n\tpublic void testCheckAnswerSuccess() {\r\n\t    // ReCaptcha server will return true to indicate success\r\n\t    buildAndCheckAnswer(\"true\", true, null)\r\n\t}\r\n\r\n\tpublic void testCheckAnswerFailure() {\r\n\t    // ReCaptcha server will return false, followed by the error message on a new line for failure\r\n\t    buildAndCheckAnswer(\"false\\\\nError Message\", false, \"Error Message\")\r\n\t}\r\n\r\n\r\n# Usage - Mailhide\r\n\r\n## Edit the Configuration\r\n\r\nThe `recaptcha-quickstart` plugin creates basic configuration. You must enter your public and private Mailhide keys, or errors will be thrown when trying to display a Mailhide link.\r\n\r\n## Use the Tag Library\r\n\r\nThe plugin includes two Mailhide tags: `<recaptcha:mailhide>` and `<recaptcha:mailhideURL>`.\r\n\r\n* The `<recaptcha:mailhide>` tag creates a Mailhide URL that opens in a new, pop-up window per the Mailhide specification. It supports one attribute: \"emailAddress\", to specify the email to be hidden. The link will be created around whatever content is in the body of the tag.\r\n* The `<recaptcha:mailhideURL>` tag creates a \"raw\" URL that can be used however desired. This is useful if the pop-up behavior of the other tag is not wanted. It supports two attributes: \"emailAddress\" and \"var\". The \"emailAddress\" attribute specifies the email to be hidden, while the \"var\" attribute specifies the name of the variable that the created URL should be available under in the page. The URL variable is only available in the context of the tag body.\r\n\r\n## Examples\r\n\r\n### mailhide tag\r\n\r\n    <recaptcha:mailhide emailAddress=\"x@example.com\">Some text to wrap in a link</recaptcha:mailhide>\r\n\r\n\r\nwill create:\r\n\r\n\r\n\t<a href=\"http://www.google.com/recaptcha/mailhide/d?k=...publicKey...&c=..encryptedEmail...\"\r\n\t     onclick=\"window.open('http://www.google.com/recaptcha/mailhide/d?k=...publicKey...&c=...encryptedEmail...', '', \r\n\t     'toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=0,width=500,height=300'); return false;\" \r\n\t     title=\"Reveal this e-mail address\">Some text to wrap in a link</a>\r\n\r\n\r\n### mailhideURL tag\r\n\r\n    <recaptcha:mailhideURL emailAddress=\"x@example.com\" var=\"mu\">\r\n        Created Mailhide URL: ${mu}\r\n    </recaptcha:mailhideURL>\r\n\r\n\r\nwill create:\r\n\r\n\r\n    Created Mailhide URL: http://www.google.com/recaptcha/mailhide/d?k=...publicKey...&c=...encryptedEmail...\r\n\r\n\r\n# Misc.\r\n\r\n\r\n### CHANGELOG\r\n\r\n* 0.6.2 Remove spurious `println` left over. Change install behavior to not create `RecaptchaConfig.groovy` in `_Install.groovy`. Add new script `recaptcha-quickstart` to handle creation of required configuration. \r\n* 0.6.0 Add the ability to display the widget using AJAX. Change plugin to require Grails 2.0 at a minimum.\r\n* 0.5.3 Add the ability to force a different language to be displayed.\r\n* 0.5.1 & 0.5.2 Update to use the new ReCaptcha URLs.\r\n* 0.5.0 Add Mailhide support. Add support for specifying configuration options elsewhere than `RecaptchaConfig.groovy` via the `grails.config.locations` method.\r\n* 0.4.5 Add code to perform the ReCaptcha functionality - removed recaptcha4j library. Don't add captcha instance to session to avoid serialization issues. Hopefully make it easier to test against.\r\n* 0.4 New version number for Grails 1.1. Same functionality as 0.3.2\r\n* 0.3.2 Moved code into packages. Tried to make licensing easier to discern. Updated to Grails 1.0.4\r\n* 0.3 Added support for environments and new `<recaptcha:ifFailed>` tag. Updated to Grails 1.0.3\r\n* 0.2 initial release, developed and tested against Grails 1.0.2\r\n\r\n### KNOWN ISSUES\r\n\r\n* If you are testing locally on a Mac, you may need to change `recaptchaService.verifyAnswer(session, request.getRemoteAddr(), params)` to `recaptchaService.verifyAnswer(session, \"127.0.0.1\", params)`. This seems to be an issue with the ReCaptcha service not being able to handle the IPV6 localhost identifier.\r\n\r\n### TODO\r\n\r\n* Automate session cleanup\r\n\r\n### Thanks\r\n\r\n* The `recaptcha-quickstart` script was borrowed heavily from the [Spring Security Core plugin](http://grails.org/plugin/spring-security-core).\r\n\r\n\r\n# Suggestions or Comments\r\n\r\nFeel free to submit questions or comments to the Grails users mailing list.\r\n\r\n[http://grails.org/Mailing+lists](http://grails.org/Mailing+lists)\r\n\r\nAlternatively you can contact me directly - cjohnston at megatome dot com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}